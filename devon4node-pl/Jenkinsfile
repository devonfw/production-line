@Library('ProductionLineTemplateLib@release/1.1')

import com.capgemini.productionline.configuration.*

Jenkins jenkinsConfiguration = new Jenkins();
GitLab gitlabConfiguration = new GitLab(this, params.GITLAB_USER_PRIVATE_TOKEN, ProductionLineGlobals.GITLAB_BASE_URL);

pipeline{
    agent any

  tools {
        nodejs "NodeJS LTS"
    }
    //Jenkins Job Parameters
    parameters { 
        string(name: 'GITLAB_USER_PRIVATE_TOKEN', defaultValue: '', description: 'NEEDS TO BE SET!. Private Token of a Production Line Gitlab User that can be used to create repositories.') 
        string(name: 'GITLAB_CREATE_GROUP_NAME', defaultValue: 'devon', description: 'Name of the group that will be created inside GitLab to clone the repo.') 
        string(name: 'GITLAB_CREATE_PROJECT_NAME', defaultValue: 'devon4node', description: 'Name of the repository inside GitLab that will be created.') 
        string(name: 'GITLAB_CREATE_BRANCH', defaultValue: 'master', description: 'Branch') 
        string(name: 'GITLAB_CREATE_PROJECT_DESCRIPTION', defaultValue: 'Devon for node PL template', description: 'Description of the repository.') 
        string(name: 'GITLAB_CLONE_URL', defaultValue: '', description: 'Private Token of a Production Line Gitlab User that can be used to create repositories.') 
        string(name: 'USERNAME', defaultValue: '', description: 'Username of a Production Line Gitlab User that can be used to create repositories.')     
    }
    
    stages {
        stage('PL setup') {
            steps{
                script{
                    println "Trying to install all required plugins"
                    //Install the required Jenkins plugins
                    //The template currently requires the following plugins to be present
                    def pluginsHaveBeenInstalled = jenkinsConfiguration.installPlugin(["http_request", "job-dsl", "pipeline-maven", "NodeJS+Plugin", "GitLab+Plugin"])
                    
                    if( pluginsHaveBeenInstalled ) {
                        println "New plugins were installed - Restart"
                        // We need to restart Jenkins in case new plugins have been installed.
                        //if set to false, then do a force restart
                        //still requires to manually start the job again afterwards
                        jenkinsConfiguration.restartJenkins(false);
                    } else {
                        println "No plugins were installed"
                    }

                    //Add nodejs
                    //public boolean addNodeJS_Version(String installName, String nodeJS_Version, String npmPackages="", String home="", long npmPackagesRefreshHours=100) {
                    println "Trying to install nodejs config"
                    String installName = "NodeJS 10.14.0"
                    String nodeJS_Version = "10.14.0"
                    String npmPackages = "yarn"
                    String home = ""
                    long npmPackagesRefreshHours = 100

                    nodeJSInstallSuccess = jenkinsConfiguration.addNodeJS_Version(installName, nodeJS_Version, npmPackages, home, npmPackagesRefreshHours)
                    
                    //Add the required script approval
                    println "Adding required script approvals in Jenkins"
                    jenkinsConfiguration.approveSignature("method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object")                 
                }
            }
        }  
        stage('Create Devon4node repo') {
            steps{
                script{          
                    println "Trying to create gitlab group"
                    //Check if group already exists
                    if(gitlabConfiguration.getGroupId(params.GITLAB_CREATE_GROUP_NAME) == ""){
                        println "No group existing yet, trying to create"
                        //Create a group for devon
                        // public createGroup(String groupname, String grouppath, String groupdesc, String grouptype) {
                        gitlabConfiguration.createGroup(params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_PROJECT_DESCRIPTION, "public")
                    } else {
                        println "Group already exists"
                    }
                    //Check if project already exists
                    println "Trying co create Gitlab project"
                    if(gitlabConfiguration.getProjectId(params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_PROJECT_NAME) == ""){
                        println "No project with the same name exists yet, trying to create"
                        //Create a new public repository for Devon4node in the Production Line
                        gitlabConfiguration.createProject(
                            params.GITLAB_CREATE_GROUP_NAME, 
                            params.GITLAB_CREATE_PROJECT_NAME, 
                            params.GITLAB_CREATE_PROJECT_NAME, 
                            params.GITLAB_CREATE_PROJECT_DESCRIPTION, 
                            params.GITLAB_CREATE_BRANCH, 
                            params.GITLAB_CLONE_URL,
                            "public"
                        )
                    } else {
                        println "Project with the same name already exists"
                    }
                }
            }
        }
        stage('Generate Node template job'){
            steps{
                println "Trying to create Jenkins jobs"
                script{
                    //Disable Job Security
                    println "Disable job dsl security"
                    jenkinsConfiguration.disableJobDSLScriptSecurity()

                    //Prepare folders in Jenkins for the jobs
                    println "Trying to create folder for jobs"
                    jobDsl scriptText: """
                        folder("Node"){
                            description('Jobs generated by the Devon4node Template.')
                        }
                        """
                    //Build job
                    println "Trying to create Build job"
                    jobDsl scriptText: """
                        multibranchPipelineJob("Node/Devon4node_build_template") {
                            description('Build job for devon4node template.')
                            branchSources {
                                git {
                                    remote("${ProductionLineGlobals.GITLAB_BASE_URL}/${params.GITLAB_CREATE_GROUP_NAME}/${params.GITLAB_CREATE_PROJECT_NAME}.git")
                                    includes('master release* develop')
                                }
                            }
                            orphanedItemStrategy {
                                discardOldItems {
                                    numToKeep(10)
                                }
                            }
                        }
                        """
                    //Enable Job Security again
                    println "Enable job dsl security"
                    jenkinsConfiguration.enableJobDSLScriptSecurity()
                }
            }
        }   
        stage('Install nestjs/cli & cicdgen') {
            steps{
             cleanWs()
             deleteDir()
                sh 'npm i -g @nestjs/cli @devonfw/cicdgen'
            }
        }     
        stage('nest new') {
            steps{
                sh 'nest new devon4node -s -p yarn'
            }
        }       
        stage('Create cicdgen Node template') {
            steps{
                dir("devon4node"){
                    sh """git config user.email "jenkins@production-line.com" """
                    sh """git config user.name "Jenkins" """
                    sh "cicdgen generate devon4node --groupid com.devonfw"                                           
                }
            }
        }
        stage('Pushing template to Gitlab') {
            steps{             
                sh 'cd devon4node && git remote add origin http://${USERNAME}@gitlab-core:80/gitlab/${GITLAB_CREATE_GROUP_NAME}/${GITLAB_CREATE_PROJECT_NAME}.git && git push --set-upstream origin master'
            }
        }

    }

    post{
        always{
            cleanWs()
            deleteDir()
        }
    }
}
