@Library('ProductionLineTemplateLib')

import com.capgemini.productionline.configuration.*

Jenkins jenkinsConfiguration = new Jenkins();
GitLab gitlabConfiguration = new GitLab(this, params.GITLAB_USER_PRIVATE_TOKEN, ProductionLineGlobals.GITLAB_BASE_URL);

 

pipeline{

    agent any

  tools {
        maven "Maven3"
        nodejs "NodeJS LTS"
    }

    //Jenkins Job Parameters
    parameters { 
        string(name: 'GITLAB_USER_PRIVATE_TOKEN', defaultValue: '', description: 'NEEDS TO BE SET!. Private Token of a Production Line Gitlab User that can be used to create repositories.') 
        string(name: 'GITLAB_CREATE_GROUP_NAME', defaultValue: 'devon', description: 'Name of the group that will be created inside GitLab to clone the repo.') 
        string(name: 'GITLAB_CREATE_PROJECT_NAME', defaultValue: 'devon4j', description: 'Name of the repository inside GitLab that will be created.') 
        string(name: 'GITLAB_CREATE_BRANCH', defaultValue: 'master', description: 'Branch') 
        string(name: 'GITLAB_CREATE_PROJECT_DESCRIPTION', defaultValue: 'Devon for java PL template', description: 'Description of the repository.') 
        string(name: 'GITLAB_CLONE_URL', defaultValue: '', description: 'Private Token of a Production Line Gitlab User that can be used to create repositories.') 
        string(name: 'PACKAGE_NAME', defaultValue: 'sample', description: 'The packagename of the application. .') 
        string(name: 'USERNAME', defaultValue: '', description: 'Username of a Production Line Gitlab User that can be used to create repositories.') 
        string(name: 'VERSION', defaultValue: '0.0.1', description: 'The version number.') 
        string(name: 'DB_TYPE', defaultValue: 'h2', description: 'The type of the database. Possible values: h2|postgresql|mysql|mariadb|oracle|hana|db2') 
    }
    
    stages {
        stage('PL setup') {
            steps{
                cleanWs()
                script{
                    println "Trying to install all required plugins"
                    //Install the required Jenkins plugins
                    //The template currently requires the following plugins to be present
                    def pluginsHaveBeenInstalled = jenkinsConfiguration.installPlugin(["http_request", "job-dsl", "pipeline-maven", "NodeJS+Plugin"])
                    
                    if( pluginsHaveBeenInstalled ) {
                        println "New plugins were installed - Restart"
                        // We need to restart Jenkins in case new plugins have been installed.
                        //if set to false, then do a force restart
                        //still requires to manually start the job again afterwards
                        jenkinsConfiguration.restartJenkins(false);
                    } else {
                        println "No plugins were installed"
                    }

                    //Add nodejs
                    //public boolean addNodeJS_Version(String installName, String nodeJS_Version, String npmPackages="", String home="", long npmPackagesRefreshHours=100) {
                    println "Trying to install nodejs config"
                    String installName = "NodeJS 10.14.0"
                    String nodeJS_Version = "10.14.0"
                    String npmPackages = "yarn"
                    String home = ""
                    long npmPackagesRefreshHours = 100

                    nodeJSInstallSuccess = jenkinsConfiguration.addNodeJS_Version(installName, nodeJS_Version, npmPackages, home, npmPackagesRefreshHours)
                    
                    //Add the required script approval
                    println "Adding required script approvals in Jenkins"
                    jenkinsConfiguration.approveSignature("method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object")
                    
                }
            }
        }
        
        stage('Create Devon4j repo') {
            steps{
                script{
                    
                    println "Trying to create gitlab group"
                    //Check if group already exists
                    if(gitlabConfiguration.getGroupId(params.GITLAB_CREATE_GROUP_NAME) == ""){
                        println "No group existing yet, trying to create"
                        //Create a group for devon
                        // public createGroup(String groupname, String grouppath, String groupdesc, String grouptype) {
                        gitlabConfiguration.createGroup(params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_PROJECT_DESCRIPTION, "public")
                    } else {
                        println "Group already exists"
                    }

                    //Check if project already exists
                    println "Trying co create Gitlab project"
                    if(gitlabConfiguration.getProjectId(params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_PROJECT_NAME) == ""){
                        println "No project with the same name exists yet, trying to create"
                        //Create a new public repository for Devon4ng in the Production Line
                        gitlabConfiguration.createProject(
                            params.GITLAB_CREATE_GROUP_NAME, 
                            params.GITLAB_CREATE_PROJECT_NAME, 
                            params.GITLAB_CREATE_PROJECT_NAME, 
                            params.GITLAB_CREATE_PROJECT_DESCRIPTION, 
                            params.GITLAB_CREATE_BRANCH, 
                            params.GITLAB_CLONE_URL,
                            "public"
                        )
                    } else {
                        println "Project with the same name already exists"
                    }
                }
            }
        }

        stage('Generate Java template job'){
            steps{
                println "Trying to create Jenkins jobs"
                script{
                    //Disable Job Security
                    println "Disable job dsl security"
                    jenkinsConfiguration.disableJobDSLScriptSecurity()

                    //Prepare folders in Jenkins for the jobs
                    println "Trying to create folder for jobs"
                    jobDsl scriptText: """
                        folder("Java"){
                            description('Jobs generated by the Devon4j Template.')
                        }
                        """

                    //Build job
                    println "Trying to create Build job"
                    jobDsl scriptText: """
                        pipelineJob("Java/Devon4j_build_template") {
                            description('Build job for devon4j template.')
                            definition {
                                cpsScm {
                                    scm {
                                        git {
                                            remote {
                                                url('${ProductionLineGlobals.GITLAB_BASE_URL}/${params.GITLAB_CREATE_GROUP_NAME}/${params.GITLAB_CREATE_PROJECT_NAME}.git')
                                            }
                                            branches('master')
                                            scriptPath('Jenkinsfile')
                                            extensions { }  // required as otherwise it may try to tag the repo!
                                        }
                                    }
                                }
                            }
                        }
                        """

                    //Enable Job Security again
                    println "Enable job dsl security"
                    jenkinsConfiguration.enableJobDSLScriptSecurity()
                }
            }
        }
        
        stage('Install cicdgen') {
            steps{
                sh 'npm i -g @devonfw/cicdgen'
            }
        }

        stage('Generate Maven project') {
            steps{
                sh 'mvn -DarchetypeVersion=3.0.0 -DarchetypeGroupId=com.devonfw.java.templates -DarchetypeArtifactId=devon4j-template-server archetype:generate -DgroupId=com.devonfw -DartifactId=${PACKAGE_NAME} -Dversion=${VERSION} -Dpackage=com.devonfw.${PACKAGE_NAME} -DdbType=${DB_TYPE} -DinteractiveMode=false'
            }
        }
        
        stage('Create cicdgen java template') {
            steps{
                script{
                    PL_NAME = sh(returnStdout: true, script: "curl -v -H 'Content-Type: application/json' -H 'Authorization: $MICROPORTAL_TOKEN' 'http://microportal:8080/api/metadata' | jq -r '.engagementname'")   
                    PL_NAME = PL_NAME.trim()   
                }
                sh "cd ${PACKAGE_NAME} && cicdgen generate devon4j --docker --plurl \""+PL_NAME+".dev.s2-eu.capgemini.com\""
            }
        }
        
        stage('Pushing template to Gitlab') {
            steps{
                sh 'cd ${PACKAGE_NAME} && git init && git remote add origin http://${USERNAME}@gitlab-core:80/gitlab/${GITLAB_CREATE_GROUP_NAME}/${GITLAB_CREATE_PROJECT_NAME}.git && git add * && git commit -m "initial commit" && git push origin master'
            }
        }
    }
}