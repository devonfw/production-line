@Library('ProductionLineTemplateLib')

import com.capgemini.productionline.configuration.*

JenkinsConfiguration jenkinsConfiguration = new JenkinsConfiguration();
GitLab gitlabConfiguration = new GitLab(this, params.GITLAB_USER_PRIVATE_TOKEN, ProductionLineGlobals.GITLAB_BASE_URL);

 

pipeline{

    agent any

    tools {
        nodejs "NodeJS LTS"
    }
    //Jenkins Job Parameters
    parameters { 
        string(name: 'PROJECT_NAME', defaultValue: 'devonfw', description: 'Name of the project. The word "-frontend" will be appended.') 
        string(name: 'GROUP_ID', defaultValue: 'com.devonfw', description: 'The group id of the project.') 
        string(name: 'GITLAB_USER_PRIVATE_TOKEN', defaultValue: 'wzsJ2ovaaspLZDe8_eL8', description: 'NEEDS TO BE SET!. Private Token of a Production Line Gitlab User that can be used to create repositories.') 
        string(name: 'GITLAB_CREATE_GROUP_NAME', defaultValue: 'devon', description: 'Name of the group that will be created inside GitLab to clone the repo.') 
        string(name: 'GITLAB_CREATE_BRANCH', defaultValue: 'master', description: 'Branch') 
        string(name: 'GITLAB_CREATE_PROJECT_DESCRIPTION', defaultValue: 'Devon for angular PL template', description: 'Description of the repository.')
        credentials(credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', defaultValue: 'gitlab-user', description: 'Gitlab integration user credentials', name: 'GITLAB_CREDENTIALS', required: true)
        booleanParam(defaultValue: true, description: 'If true will generate docker related files and build&deploy steps in the pipeline', name: 'DOCKER')
        
    }
    
    stages {
        stage('PL setup') {
            steps{
                script{
                    PROJECT_NAME_FULL = params.PROJECT_NAME + "-frontend"                

                    println "Trying to install all required plugins"
                    //Install the required Jenkins plugins
                    //The template currently requires the following plugins to be present
                    def pluginsHaveBeenInstalled = jenkinsConfiguration.installPlugin(["http_request", "job-dsl", "pipeline-maven", "NodeJS+Plugin"])
                    
                    if( pluginsHaveBeenInstalled ) {
                        println "New plugins were installed - Restart"
                        // We need to restart Jenkins in case new plugins have been installed.
                        //if set to false, then do a force restart
                        //still requires to manually start the job again afterwards
                        jenkinsConfiguration.restartJenkins(false);
                    } else {
                        println "No plugins were installed"
                    }

                    //Add nodejs
                    println "Trying to install nodejs config"
                    String installName = "NodeJS 10.14.0"
                    String nodeJS_Version = "10.14.0"
                    String npmPackages = "yarn"
                    String home = ""
                    long npmPackagesRefreshHours = 100

                    nodeJSInstallSuccess = jenkinsConfiguration.addNodeJS_Version(installName, nodeJS_Version, npmPackages, home, npmPackagesRefreshHours)
                    
                    //Add the required script approval
                    println "Adding required script approvals in Jenkins"
                    jenkinsConfiguration.approveSignature("method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object")
                }
            }
        }
        
        stage('Create Devon4ng repo') {
            steps{
                script{
                    println "Trying to create gitlab group"
                    //Check if group already exists
                    if(gitlabConfiguration.getGroupId(params.GITLAB_CREATE_GROUP_NAME) == ""){
                        println "No group existing yet, trying to create"
                        //Create a group for devon
                        // public createGroup(String groupname, String grouppath, String groupdesc, String grouptype) {
                        gitlabConfiguration.createGroup(params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_GROUP_NAME, params.GITLAB_CREATE_PROJECT_DESCRIPTION, "public")
                    } else {
                        println "Group already exists"
                    }
                    //Check if project already exists
                    println "Trying co create Gitlab project"
                    if(gitlabConfiguration.getProjectId(params.GITLAB_CREATE_GROUP_NAME, PROJECT_NAME_FULL) == ""){
                        println "No project with the same name exists yet, trying to create"
                        //Create a new public repository for Devon4ng in the Production Line
                        gitlabConfiguration.createProject(
                            params.GITLAB_CREATE_GROUP_NAME, 
                            PROJECT_NAME_FULL, 
                            PROJECT_NAME_FULL, 
                            params.GITLAB_CREATE_PROJECT_DESCRIPTION, 
                            params.GITLAB_CREATE_BRANCH, 
                            "public"
                        )
                    } else {
                        println "Project with the same name already exists"
                    }
                }
            }
        }

        stage('Generate Angular template job'){
            steps{
                println "Trying to create Jenkins jobs"
                script{
                    //Disable Job Security
                    println "Disable job dsl security"
                    jenkinsConfiguration.disableJobDSLScriptSecurity()

                    //Prepare folders in Jenkins for the jobs
                    println "Trying to create folder for jobs"
                    jobDsl scriptText: """
                        folder("${PROJECT_NAME}"){
                            description('Jobs for ${PROJECT_NAME} project.')
                        }
                        """

                    //Build job
                    println "Trying to create Build job"
                    jobDsl scriptText: """
                        multibranchPipelineJob("${PROJECT_NAME}/${PROJECT_NAME_FULL}") {
                            description('Build job for devon4ng template.')
                            branchSources {
                                git {
                                    remote('${ProductionLineGlobals.GITLAB_BASE_URL}/${params.GITLAB_CREATE_GROUP_NAME}/${PROJECT_NAME_FULL}.git')
                                    credentialsId('github-ci')
                                    includes('master release* develop')
                                }
                            }
                            orphanedItemStrategy {
                                discardOldItems {
                                    numToKeep(10)
                                }
                            }
                        }
                        """

                    //Enable Job Security again
                    println "Enable job dsl security"
                    jenkinsConfiguration.enableJobDSLScriptSecurity()
                }
            }
        }
    
        stage('Install angular & cicdgen') {
            steps{
                cleanWs()
                deleteDir()

                sh 'npm i -g @angular/cli @devonfw/cicdgen'
            }
        }
      
        stage('ng new') {
            steps{
                sh "ng new ${PROJECT_NAME_FULL} --routing --defaults --skip-install â€“style scss"
            }
        }
        
        stage('Create cicdgen Angular template') {
            steps{
                script{
                    PL_NAME = sh(returnStdout: true, script: "curl -v -H 'Content-Type: application/json' -H 'Authorization: $MICROPORTAL_TOKEN' 'http://microportal:8080/api/metadata' | jq -r '.engagementname'")   
                    PL_NAME = PL_NAME.trim()   
                    
                    def dockerString = ''

                    if (params.DOCKER){
                        dockerString = "--docker --plurl ${PL_NAME}.s2-eu.capgemini.com "
                    }
                
                    dir(PROJECT_NAME_FULL) {
                        sh 'git config user.email "jenkins-pl@capgemini.com"'
                        sh 'git config user.name "Jenkins"'
                        sh "cicdgen generate devon4ng ${dockerString}--groupid ${params.GROUP_ID}"
                    }
                }
            }
        }

        stage('Pushing template to Gitlab') {
            steps{
                script {
                    dir(PROJECT_NAME_FULL){
                        withCredentials([usernamePassword(credentialsId: params.GITLAB_CREDENTIALS, passwordVariable: 'gitlab_password', usernameVariable: 'gitlab_user')]) {
                            sh "git status && git remote add origin http://${gitlab_user}:${gitlab_password}@gitlab-core:80/gitlab/${GITLAB_CREATE_GROUP_NAME}/${PROJECT_NAME_FULL}.git && git push --set-upstream origin master"
                        }
                    }    
                }
            }
        }
    }
}